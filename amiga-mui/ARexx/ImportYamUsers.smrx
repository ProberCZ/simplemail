/*
This is an ARexx-Script for SimpleMail

$VER: ImportYamUsers.smrx 1.4 (19.2.10)
$Author: AmigaPhil
$Label: Import YAM's address book
$Desc: Import contact addresses from YAM into SimpleMail

Contact: AmigaPhil <AmigaPhil (at) scarlet (dot) be>

Translation credits:
- french catalog by AmigaPhil
- dutch catalog by Johan Banis - ATO Nederland
- italian catalog by Simone "Tuxedo" Monsignori
*/ 

options results

version  = SUBWORD(SOURCELINE(4),3,1)
wrapat = 60   /* Word-wrap a line of text to the given size in chars */
addrcount = 0

/* Localize (RexCat) */

langFile = ""
if exists('ENV:Language') then
   do
   if open('el', 'ENV:Language', 'R') then
      do
      langFile = readln('el')
      call close('el')
      end
   end
call gettlstext(langFile)

/* check if YAM is running */

smport = address()
if left(smport,11) ~== "SIMPLEMAIL." then
   do
   address command
   'WHICH >NIL: REQUESTCHOICE'
   if rc = 5 then say tls("Error: ") || "ImportYamUsers.yam" || tls(" must be run from SimpleMail.")
   else 'RUN >NIL: REQUESTCHOICE >NIL: "ImportYamUsers.yam" "' || tls("This script must be run from SimpleMail.") || '" "' || tls("Ok") || '"'
   exit
   end
address(smport)
'VERSION'
if symbol('result') ~= 'VAR' then smver = 0
else do
   smver = result
   parse var smver yver"."yrev
   vt = verify(yver,"0123456789")
   if vt > 0 then yver = left(yver,vt-1)
   vt = verify(yrev,"0123456789")
   if vt > 0 then yrev = left(yrev,vt-1)
   smver = (yver * 65536) + yrev
end

help = "*Ec*EuImportYamUsers.smrx*En v" || version || "*n*n*El"
help = help || tls("This utility import all the contact addresses from Yam into SimpleMail.") || "*n"
help = help || tls("(Only a person's name, email and alias is imported.)")
'REQUEST BODY "'smwrap(help,wrapat)'" "' || "**" || tls("Continue") || '|' || tls("Quit") || '"'
if result ~= 1 then exit

if ~show('P','YAM') then
   do
   help = tls("Error: ") || tls("Cannot find YAM port.") || "*n"
   help = help || tls("Please start YAM and try again.")
   'REQUEST BODY "'smwrap(help,wrapat)'" "' || "**" || tls("Ok") || '"'
   exit
   end
yamport = "YAM"

address(yamport)
'ADDRFIND PATTERN "#?" STEM 'ADDRLIST.
if rc ~= 0 then
   do
   help = tls("Found no contact addresses to import.")
   'REQUEST BODY "'smwrap(help,wrapat)'" "' || "**" || tls("Ok") || '"'
   exit
   end

'APPBUSY "' || tls("Exporting contact addresses to SimpleMail...") || '"'
do i=0 to (ADDRLIST.ALIAS.COUNT - 1)
   address(yamport)
   'ADDRINFO "'ADDRLIST.ALIAS.i'" STEM 'USER.
   if USER.TYPE ~= "P" then iterate
   address(smport)
   addrcount = addrcount + 1
   say tls("Adding: ") || USER.NAME
   'ADDRNEW NAME "'USER.NAME'" EMAIL "'USER.EMAIL'" ALIAS "'ADDRLIST.ALIAS.i'"'
end
if addrcount > 0 then
   do
   'ADDRSAVE'
   say ""
   say tls("Done.")
   say tls("Total contacts added: ") || addrcount
   end

address(yamport)
'APPNOBUSY'

exit


/* Word-wrap a text string to the given size per line.
   A size below 20 chars will be ignored (no wrap).    */

smwrap: procedure

parse arg intext,wrap
if ~datatype(wrap,'W') then wrap = 0
if (wrap > 19) & (words(intext) > 1) then
   do
   tmptext = ""
   tmpline = word(intext,1)
     do i = 2 to words(intext)
     nextword = word(intext,i)
     if length(tmpline || " " || nextword) > wrap then
        do
        tmptext = tmptext || tmpline || "*n"
        tmpline = nextword
        end
     else
        do
        tmpline = tmpline || " " || nextword
        lastLF = lastpos("*N",upper(tmpline))
        if lastLF > 1 then
           do
           tmptext = tmptext || substr(tmpline,1,lastLF+1)
           tmpline = substr(tmpline,lastLF+2)
           end
        end
     end
   if length(tmpline) > 0 then tmptext = tmptext || tmpline
   intext = tmptext
   end
return intext


/* (RexCat) Function which translates the strings */

tls: PROCEDURE EXPOSE tlstext.

  PARSE ARG instring

  IF instring = '' THEN RETURN instring
  IF LENGTH(instring) > 250 THEN instring = LEFT(instring,250)
  IF tlstext.instring == 'TLSTEXT.' || instring THEN RETURN instring
  IF tlstext.instring = '' THEN RETURN instring

  RETURN tlstext.instring


/* (RexCat) Function to load the translation file */

gettlstext: PROCEDURE EXPOSE tlstext.

  PARSE ARG language
  IF language = '' THEN RETURN 0

  currentDir = PRAGMA('D')
  IF (RIGHT(currentDir,1) ~= ':') & (RIGHT(currentDir,1) ~= '/') THEN currentDir = currentDir || "/"
  scriptDir  = ''
  PARSE SOURCE scriptPath
  scriptPath = SUBWORD(scriptPath,4,WORDS(scriptPath)-5)
  parpos = LASTPOS('/', scriptPath)
  IF parpos = 0 THEN parpos = POS(':', scriptPath)
  IF parpos > 0 THEN scriptDir = LEFT(scriptPath, parpos)
  scriptName = SUBSTR(scriptPath, parpos + 1)
  langFile = language || "/" || scriptName || ".catalog"
  CALL PRAGMA('W','N')
  IF EXISTS("LOCALE:RexxCatalogs") THEN CALL PRAGMA('D',"LOCALE:RexxCatalogs")
  CALL PRAGMA('W','W')
  IF ~EXISTS(langFile) THEN CALL PRAGMA('D',currentDir || "RexxCatalogs")
  IF ~EXISTS(langFile) THEN CALL PRAGMA('D',currentDir || "Locale/Catalogs")
  IF ~EXISTS(langFile) THEN CALL PRAGMA('D',scriptDir || "RexxCatalogs")
  IF ~EXISTS(langFile) THEN CALL PRAGMA('D',scriptDir || "Locale/Catalogs")

  rcode = 0
  IF OPEN('lf',langFile, 'R') THEN DO
    rcode = 1
    tlssrc = ''
    tlsdst = ''
    DO WHILE ~EOF('lf')
      instring = STRIP(READLN('lf'))
      IF (LENGTH(instring) > 0) & (LEFT(instring,2) ~= '/*') & (LEFT(instring,2) ~= '//') THEN DO
        PARSE VAR instring tmpvar "=" qtmpstr
        IF (TRANSLATE(STRIP(tmpvar)) ~= "TLSSRC") & (TRANSLATE(STRIP(tmpvar)) ~= "TLSDST") THEN ITERATE
        tmpstr = STRIP(qtmpstr,'L')
        quot = LEFT(tmpstr,1)
        IF (quot = "'") | (quot = '"') THEN DO
           strend = POS(quot,tmpstr,2)
           IF strend > 1 THEN DO
              tmpstr = SUBSTR(tmpstr,2,strend - 2)
              IF LENGTH(tmpstr) > 250 THEN tmpstr = LEFT(tmpstr,250)
              INTERPRET tmpvar || "=" || quot || tmpstr || quot
           END
        END
      END
      IF tlssrc ~= '' THEN DO
        IF tlsdst ~= '' THEN DO
          tlstext.tlssrc = tlsdst
          tlssrc = ''
          tlsdst = ''
        END
      END
    END
    CALL CLOSE('lf')
  END

  CALL PRAGMA('D',currentDir)

  RETURN rcode

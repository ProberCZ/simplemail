/*
This is an ARexx-Script for SimpleMail

$VER: ImportThorMails.smrx 1.0 (23.08.09)
$Author: AmigaPhil
$Label: Import messages from Thor
$Desc: Import Thor's selected messages into SimpleMail
*/

options results
options failat 31

version  = SUBWORD(SOURCELINE(4),3,1)
wrapat = 60   /* Word-wrap a line of text to the given size in chars */

/* Localize (maketls.rexx) */

if exists('ENV:Language') then
   do
   if open('el', 'ENV:Language', 'R') then
      do
      langFile = readln('el')
      call close('el')
      call gettlstext(langFile)
      end
   end

/* check if SimpleMail is running */

smport = address()
if left(smport,11) ~== "SIMPLEMAIL." then
   do
   address command
   'WHICH >NIL: REQUESTCHOICE'
   if rc = 5 then say tls("Error: ") || "ImportThorUsers.smrx" || tls(" must be run from SimpleMail.")
   else 'RUN >NIL: REQUESTCHOICE >NIL: "ImportThorUsers.smrx" "' || tls("This script must be run from SimpleMail.") || '" "' || tls("Ok") || '"'
   exit
   end
address(smport)

help = "*Ec*EuImportThorMails.smrx*En v" || version || "*n*n*El"
help = help || tls("This utility import selected messages in Thor (or the current one) into SimpleMail. ")
'REQUEST BODY "'smwrap(help,wrapat)'" "' || tls("Continue") || '|' || tls("Quit") || '"'
if result ~= 1 then exit

p = ' ' || address() || ' ' || show('P',,)
thorport = pos(' THOR.',p)
if thorport = 0 then
   do
   help = tls("Error: ") || tls("Cannot find Thor port.") || "*n"
   help = help || tls("Please start Thor and select the messages you want to import from Thor's message list.")
   'REQUEST BODY "'smwrap(help,wrapat)'" "' || tls("Ok") || '"'
   exit
   end
thorport = word(substr(p,thorport+1),1)

if ~show('p', 'BBSREAD') then
   do
   address command
   "run >nil: `GetEnv THOR/THORPath`bin/LoadBBSRead"
   "WaitForPort BBSREAD"
   end
if ~show('p', 'BBSREAD') then
   do
   address(smport)
   help = tls("Error: ") || tls("Cannot load BBSREAD library.") || "*n"
   help = help || tls("Please check your Thor installation.")
   'REQUEST BODY "'smwrap(help,wrapat)'" "' || tls("Cancel") || '"'
   exit
   end


address(thorport)
'VERSION STEM 'VERS
parse var VERS.THOR tver"."trev
if (tver < 2) | ((tver = 2) & (trev < 1)) then
   do
   address(smport)
   help = tls("Sorry, this script needs at least Thor v2.1.")
   'REQUEST BODY "'smwrap(help,wrapat)'" "' || tls("Ok") || '"'
   exit
   end

'GETMSGLISTSELECTED STEM 'MSGLIST
if rc = 3 then
   do
   'CURRENTMSG 'CURMSG
   if (rc = 30) & (THOR.LASTERROR = 'No current message.') then
      do
      address(smport)
      help = tls("No message selected and no current message.") || "*n"
      help = help || tls("Please select the messages you want to import from Thor's message list.")
      'REQUEST BODY "'smwrap(help,wrapat)'" "' || tls("Ok") || '"'
      exit
      end
   else
      do
      if rc ~= 0 then
         do
         address(smport)
         help = tls("Error: ") || THOR.LASTERROR
         'REQUEST BODY "'smwrap(help,wrapat)'" "' || tls("Cancel") || '"'
         exit
         end
      else
         do
         MSGLIST.1 = CURMSG.MSGNR; MSGLIST.COUNT = 1
         end
      end
   drop CURMSG.
   end
else if rc ~= 0 then
   do
   address(smport)
   if rc = 5 then
      do
      help = tls("No message selected and no current message.") || "*n"
      help = help || tls("Please select the messages you want to import from Thor's message list.")
      'REQUEST BODY "'smwrap(help,wrapat)'" "' || tls("Ok") || '"'
      exit
      end
   else
      do
      help = THOR.LASTERROR || "*n"
      help = help || tls("Please select the messages you want to import from Thor's message list.")
      'REQUEST BODY "'smwrap(help,wrapat)'" "' || tls("Ok") || '"'
      exit
      end
   end
'CURRENTSYSTEM STEM 'CURSYS
if rc ~= 0 then
   do
   address(smport)
   help = tls("Error: ") || THOR.LASTERROR
   'REQUEST BODY "'smwrap(help,wrapat)'" "' || tls("Cancel") || '"'
   exit
   end
else if CURSYS.CONFNAME = "" then
   do
   address(smport)
   help = tls("Error: ") || tls("Current conference name not found.")
   'REQUEST BODY "'smwrap(help,wrapat)'" "' || tls("Cancel") || '"'
   exit
   end
address(smport)
'FOLDERINFO STEM 'SMFOLDER.
if MSGLIST.COUNT = 1 then help = tls("The current message is ready to import.")
else help = MSGLIST.COUNT || tls(" messages ready to import.")
help = tls("Importing messages from ") || "*Eb" || CURSYS.CONFNAME || "*En" || tls(" to ") || "*Eb" || SMFOLDER.NAME || "*En:*n*n" || help
'REQUEST BODY "'smwrap(help,wrapat)'" "' || tls("Import") || '|' || tls("Cancel") || '"'
if result ~= 1 then exit
'MAILLISTFREEZE'

window = ""
address(thorport)
'OPENPROGRESS TITLE "' || tls("Importing messages from ") || CURSYS.CONFNAME || '" TOTAL 'MSGLIST.COUNT' AT "' || tls("_Abort") || '"'
if rc = 0 then window = result

do i=1 to MSGLIST.COUNT
   address(thorport)
   if window ~= "" then
      do
      'UPDATEPROGRESS REQ 'window' CURRENT 'i' PT "' || tls("Importing message #") || MSGLIST.i || '"'
      if rc ~= 0 then
         do
         if rc = 5 then leave i
         else
            do
            'CLOSEPROGRESS REQ 'window
            address(smport)
            help = tls("Error: ") || THOR.LASTERROR
            'REQUEST BODY "'smwrap(help,wrapat)'" "' || tls("Cancel") || '"'
            exit
            end
         end
      end
   drop MSGTXT.
   address(BBSREAD)
   'READBRMESSAGE "'CURSYS.BBSNAME'" "'CURSYS.CONFNAME'" 'MSGLIST.i' TEXTSTEM MSGTXT'
   if rc ~= 0 then
      do
      address(smport)
      help = tls("Error: ") || BBSREAD.LASTERROR
      'REQUEST BODY "'smwrap(help,wrapat)'" "' || tls("Cancel") || '"'
      exit
      end
   call fixbin('MSGTXT')

   address(smport)
   'NEWMAILFILE FOLDER "'SMFOLDER.NAME'"'
   mfile = result
   /*** To avoid to mess the folder index (imported mails shown as "deleted" in 0.33),
        the mail file is temporary saved to T: before importing it with MAILADD.       ***/
   endpath = LASTPOS('/',mfile)
   IF endpath = 0 THEN endpath = LASTPOS(':',mfile)
   IF endpath = 0 THEN tmpmfile = mfile
   ELSE tmpmfile = "T:" || DELSTR(mfile,1,endpath)

   address(thorport)
   'SAVEMESSAGE BBS "'CURSYS.BBSNAME'" CONF "'CURSYS.CONFNAME'" MSGNR 'MSGLIST.i' FILE "' || tmpmfile || '" OVERWRITE'
   if rc ~= 0 then
      do
      say tls("Failed to save message #") || MSGLIST.i || " (rc=" || rc || "): " || THOR.LASTERROR
      say tls("SimpleMail filename was ") || "'" || mfile || "'"
      say ""
      end
   else
      do
      address(smport)
      'MAILADD FOLDER "'SMFOLDER.NAME'" FILENAME "' || tmpmfile || '"'
      address command 'DELETE >NIL: "'tmpmfile'"'
      end
   /*** At this point, the imported mail status (read/unread, ...)
        is not preserved (will appear as NEW in SimpleMail)
        The upcoming MAILSETSTATUS command should solve this.      ***/

end

if BINLIST.COUNT > 0 then
   do
   address command 'DELETE >NIL: "'tmpmfile'"'
    do j=1 to BINLIST.COUNT
       'DELETE >nil: "'BINLIST.j'"'
    end
   end

address(smport)
'MAILLISTTHAW'

if window ~= "" then
   do
   address(thorport)
   'CLOSEPROGRESS REQ 'window
   end

exit



/* Word-wrap a text string to the given size per line.
   A size below 20 chars will be ignored (no wrap).    */

smwrap: procedure

parse arg intext,wrap
if ~datatype(wrap,'W') then wrap = 0
if (wrap > 19) & (words(intext) > 1) then
   do
   tmptext = ""
   tmpline = word(intext,1)
     do i = 2 to words(intext)
     nextword = word(intext,i)
     if length(tmpline || " " || nextword) > wrap then
        do
        tmptext = tmptext || tmpline || "*n"
        tmpline = nextword
        end
     else
        do
        tmpline = tmpline || " " || nextword
        lastLF = lastpos("*N",upper(tmpline))
        if lastLF > 1 then
           do
           tmptext = tmptext || substr(tmpline,1,lastLF+1)
           tmpline = substr(tmpline,lastLF+2)
           end
        end
     end
   if length(tmpline) > 0 then tmptext = tmptext || tmpline
   intext = tmptext
   end
return intext


/* Replace a missing file by a dummy one.  This is needed
   to avoid a warning requester popping up when a binary
   attachment has been cropped from the message.
   (Check recursively in message parts.)                    */

fixbin: procedure expose MSGTXT. BINLIST.

parse arg tstem

if symbol('BINLIST.COUNT') ~= 'VAR' then BINLIST.COUNT = 0
if (symbol(tstem'.PART.COUNT') = 'VAR') then
   do
   parts = value(tstem'.PART.COUNT')
   if parts > 0 then
      do i = 1 to parts
      if (symbol(tstem'.PART.'i'.BINARY') = 'VAR') then
         do
         file = escwc(value(tstem'.PART.'i'.BINARY'))
         if file ~= "" then
            do
            if ~exists(file) then
               do
               cnt = BINLIST.COUNT
               call open('dummy',file,'W')
               call writech('dummy','[attachment deleted]')
               call close('dummy')
               cnt = cnt + 1
               BINLIST.cnt = file
               BINLIST.COUNT = cnt
               end
            end
         end
      else
         do
         usestem = tstem'.PART.'i'.MSG'
         call fixbin(usestem)
         end
      end
   end

return


/* Escape wildcards characters in filenames */

escwc: procedure

   parse arg instr
   if length(instr) < 1 then return instr

   /* Wilcard characters in AmigaDOS: */
   /* #?|()~[]% plus the single quote */

   outstr = ""

   do i=1 to length(instr)
     tstchr = substr(instr,i,1)
     select
        when tstchr = "#" then outstr = outstr || "'" || tstchr
        when tstchr = "?" then outstr = outstr || "'" || tstchr
        when tstchr = "|" then outstr = outstr || "'" || tstchr
        when tstchr = "(" then outstr = outstr || "'" || tstchr
        when tstchr = ")" then outstr = outstr || "'" || tstchr
        when tstchr = "~" then outstr = outstr || "'" || tstchr
        when tstchr = "[" then outstr = outstr || "'" || tstchr
        when tstchr = "]" then outstr = outstr || "'" || tstchr
        when tstchr = "%" then outstr = outstr || "'" || tstchr
        when tstchr = "'" then outstr = outstr || "'" || tstchr
        otherwise outstr = outstr || tstchr
     end
   end

return outstr


/* (maketls.rexx) Function to translate the output strings
   to the user's prefered language                          */

tls: PROCEDURE EXPOSE tlstext.

  PARSE ARG instring

  IF instring = '' THEN RETURN instring
  IF tlstext.instring == 'TLSTEXT.' || instring THEN RETURN instring
  IF tlstext.instring = '' THEN RETURN instring

  RETURN tlstext.instring


/* (maketls.rexx) Function to load the translation file (.catalog) */

gettlstext: PROCEDURE EXPOSE tlstext.

  PARSE ARG language
  IF language = '' THEN RETURN

  currentDir = PRAGMA('D')
  scriptDir  = ''
  PARSE SOURCE scriptPath
  scriptPath = SUBWORD(scriptPath,4,WORDS(scriptPath)-5)
  parpos = LASTPOS('/', scriptPath)
  IF parpos = 0 THEN parpos = POS(':', scriptPath)
  IF parpos > 0 THEN scriptDir = LEFT(scriptPath, parpos)
  scriptName = SUBSTR(scriptPath, parpos + 1)
  langFile = "Locale/Catalogs/" || language || "/" || scriptName || ".catalog"
  IF ~EXISTS(langFile) THEN CALL PRAGMA('D',scriptDir)
  IF ~EXISTS(langFile) THEN CALL PRAGMA('D',"SYS:")

  IF OPEN('lf',langFile, 'R') THEN DO
    tlssrc = ''
    tlsdst = ''
    DO WHILE ~EOF('lf')
      instring = STRIP(READLN('lf'))
      IF (LENGTH(instring) > 0) & (LEFT(instring,2) ~= '/*') & (LEFT(instring,2) ~= '//') THEN INTERPRET instring
      IF tlssrc ~= '' THEN DO
        IF tlsdst ~= '' THEN DO
          tlstext.tlssrc = tlsdst
          tlssrc = ''
          tlsdst = ''
        END
      END
    END
    CALL CLOSE('lf')
  END

  CALL PRAGMA('D',currentDir)

  RETURN

